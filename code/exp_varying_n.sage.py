

# This file was *autogenerated* from the file exp_varying_n.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8); _sage_const_128 = Integer(128); _sage_const_120 = Integer(120); _sage_const_210 = Integer(210)
from sage.all import load
from sys import argv

load("attack_Zn.sage")

experiments = int(argv[_sage_const_1 ])
processes = int(argv[_sage_const_2 ])

n_min = int(argv[_sage_const_3 ])
n_max = int(argv[_sage_const_4 ])
n_step = int(argv[_sage_const_5 ])

# 0 for unstructred, 1 for structured
structured = bool(int(argv[_sage_const_6 ]))

# 0 for FPyLLL, 1 for g6k
g6k = bool(int(argv[_sage_const_7 ]))

# 1 checks that both f, g have odd norm, as in Hawk
hawk = bool(int(argv[_sage_const_8 ]))

print("n,\t beta,\t prev_sd")

if structured:
    power = n_min
    while power < n_max:
        n = _sage_const_2 **power
        if _sage_const_2 *n <= _sage_const_128 :
            float_type = "double"
        else:
            float_type = "qd"

        beta, prev_sd, geo_prev_sd, _ = many_experiment_structured(experiments,
                                                                   processes,
                                                                   n,
                                                                   float_type=float_type,  # noqa
                                                                   g6k=g6k,
                                                                   hawk=hawk)

        data = "%d,%.3f,%.3f,%.3f\n" % (_sage_const_2 *n, beta, prev_sd, geo_prev_sd)
        print("%d,\t %.3f,\t %.3f,\t %.3f" % (_sage_const_2 *n, beta, prev_sd, geo_prev_sd))

        if g6k:
            filename = "structured-prev_sd-g-{nmin}-{nmax}-{nstep}-{experiments}".format(  # noqa
                        nmin=n_min, nmax=n_max, nstep=n_step,
                        experiments=experiments)
        else:
            filename = "structured-prev_sd-{nmin}-{nmax}-{nstep}-{experiments}".format(  # noqa
                        nmin=n_min, nmax=n_max, nstep=n_step,
                        experiments=experiments)

        with open("../data/" + filename, "a") as out:
            out.write(data)
            out.close()

        power += n_step
else:
    n = n_min
    while n < n_max:
        if n < _sage_const_120 :
            float_type = "double"
        elif n < _sage_const_210 :
            float_type = "ld"
        else:
            float_type = "qd"
        beta, prev_sd, geo_prev_sd, _ = many_experiment(experiments, processes,
                                                        n,
                                                        float_type=float_type,
                                                        g6k=g6k)

        data = "%d,%.3f,%.3f,%.3f\n" % (n, beta, prev_sd, geo_prev_sd)
        print("%d,\t %.3f,\t %.3f,\t %.3f" % (n, beta, prev_sd, geo_prev_sd))

        if g6k:
            filename = "prev_sd-g-{nmin}-{nmax}-{nstep}-{experiments}".format(
                        nmin=n_min, nmax=n_max, nstep=n_step,
                        experiments=experiments)
        else:
            filename = "prev_sd-{nmin}-{nmax}-{nstep}-{experiments}".format(
                        nmin=n_min, nmax=n_max, nstep=n_step,
                        experiments=experiments)

        with open("../data/" + filename, "a") as out:
            out.write(data)
            out.close()

        n += n_step

